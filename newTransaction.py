# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newTransaction.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QCompleter
from PyQt5.QtCore import QDate
from datetime import timedelta, datetime
import mysql.connector
from billGenerator import *

mydb = mysql.connector.connect(
    host="127.0.0.1",
    user="local",
    password="",
    database="mpdev"
)

class Ui_TransactionWindow(object):
    def setupUi(self, TransactionWindow):
        TransactionWindow.setObjectName("TransactionWindow")
        TransactionWindow.resize(1157, 851)
        TransactionWindow.setStyleSheet("QMainWindow{\n"
                                        "background-color: #212121;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton{\n"
                                        "background-color: #212121;\n"
                                        "Color: #eeeeee;\n"
                                        "border-radius: 20px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#addButton{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#addButton:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "background-color: #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#submitButton{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 25px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#submitButton:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "background-color: #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#cancelButton{\n"
                                        "color: #eeeeee;\n"
                                        "background-color: #212121;\n"
                                        "border: 2px solid #9a0002;\n"
                                        "border-radius: 25px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#cancelButton:hover{\n"
                                        "border: 3px solid rgb(255, 0, 0);\n"
                                        "background-color: #9a0002;\n"
                                        "}\n"
                                        "\n"
                                        "QLineEdit{\n"
                                        "padding-left: 6px;\n"
                                        "padding-right: 6px;\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "}\n"
                                        "\n"
                                        "QLineEdit:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QTextEdit{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "}\n"
                                        "\n"
                                        "QTextEdit:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QListWidget{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "}\n"
                                        "\n"
                                        "QListWidget:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QSpinBox{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QSpinBox:hover{\n"
                                        "border: 2px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QLabel{\n"
                                        "color: #eeeeee;\n"
                                        "}\n"
                                        "\n"
                                        "QLabel#transactionLabel{\n"
                                        "color: #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QComboBox{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "padding-left: 4px;\n"
                                        "padding-right: 4px;\n"
                                        "}\n"
                                        "\n"
                                        "QComboBox:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QComboBox QAbstractItemView {\n"
                                        "border: 2px solid #32e0c4;\n"
                                        "selection-background-color: #0d7377;\n"
                                        "}\n"
                                        "")
        self.centralwidget = QtWidgets.QWidget(TransactionWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 2, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 1, 0, 1, 1)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.transactionLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.transactionLabel.setFont(font)
        self.transactionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.transactionLabel.setObjectName("transactionLabel")
        self.verticalLayout_4.addWidget(self.transactionLabel)
        spacerItem3 = QtWidgets.QSpacerItem(20, 130, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.verticalLayout_4.addItem(spacerItem3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.studentNameLabel = QtWidgets.QLabel(self.centralwidget)
        self.studentNameLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.studentNameLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.studentNameLabel.setFont(font)
        self.studentNameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.studentNameLabel.setObjectName("studentNameLabel")
        self.verticalLayout_2.addWidget(self.studentNameLabel)
        self.nameInput = QtWidgets.QLineEdit(self.centralwidget)
        self.nameInput.setMinimumSize(QtCore.QSize(300, 40))
        self.nameInput.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.nameInput.setFont(font)
        self.nameInput.setText("")
        self.nameInput.setPlaceholderText("Enter Full Name")
        self.nameInput.setClearButtonEnabled(True)
        self.nameInput.setObjectName("nameInput")
        self.verticalLayout_2.addWidget(self.nameInput)
        spacerItem4 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.verticalLayout_2.addItem(spacerItem4)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.installmentNoLabel = QtWidgets.QLabel(self.centralwidget)
        self.installmentNoLabel.setMinimumSize(QtCore.QSize(180, 40))
        self.installmentNoLabel.setMaximumSize(QtCore.QSize(180, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.installmentNoLabel.setFont(font)
        self.installmentNoLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.installmentNoLabel.setObjectName("installmentNoLabel")
        self.horizontalLayout.addWidget(self.installmentNoLabel)
        self.installmentNoInput = QtWidgets.QLineEdit(self.centralwidget)
        self.installmentNoInput.setEnabled(False)
        self.installmentNoInput.setMinimumSize(QtCore.QSize(110, 40))
        self.installmentNoInput.setMaximumSize(QtCore.QSize(110, 40))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.installmentNoInput.setFont(font)
        self.installmentNoInput.setAlignment(QtCore.Qt.AlignCenter)
        self.installmentNoInput.setClearButtonEnabled(False)
        self.installmentNoInput.setObjectName("installmentNoInput")
        self.horizontalLayout.addWidget(self.installmentNoInput)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.installmentAmtLabel = QtWidgets.QLabel(self.centralwidget)
        self.installmentAmtLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.installmentAmtLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.installmentAmtLabel.setFont(font)
        self.installmentAmtLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.installmentAmtLabel.setObjectName("installmentAmtLabel")
        self.verticalLayout_2.addWidget(self.installmentAmtLabel)
        self.installmentAmtInput = QtWidgets.QLineEdit(self.centralwidget)
        self.installmentAmtInput.setEnabled(False)
        self.installmentAmtInput.setMinimumSize(QtCore.QSize(300, 40))
        self.installmentAmtInput.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.installmentAmtInput.setFont(font)
        self.installmentAmtInput.setAlignment(QtCore.Qt.AlignCenter)
        self.installmentAmtInput.setClearButtonEnabled(False)
        self.installmentAmtInput.setObjectName("installmentAmtInput")
        self.verticalLayout_2.addWidget(self.installmentAmtInput)
        self.transactionAmtLabel = QtWidgets.QLabel(self.centralwidget)
        self.transactionAmtLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.transactionAmtLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.transactionAmtLabel.setFont(font)
        self.transactionAmtLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.transactionAmtLabel.setObjectName("transactionAmtLabel")
        self.verticalLayout_2.addWidget(self.transactionAmtLabel)
        self.transactionAmtInput = QtWidgets.QLineEdit(self.centralwidget)
        self.transactionAmtInput.setMinimumSize(QtCore.QSize(300, 40))
        self.transactionAmtInput.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.transactionAmtInput.setFont(font)
        self.transactionAmtInput.setText("")
        self.transactionAmtInput.setAlignment(QtCore.Qt.AlignCenter)
        self.transactionAmtInput.setClearButtonEnabled(True)
        self.transactionAmtInput.setObjectName("transactionAmtInput")
        self.verticalLayout_2.addWidget(self.transactionAmtInput)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem6)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setMinimumSize(QtCore.QSize(5, 0))
        self.line.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line.setStyleSheet("background-color: #32e0c4;")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_2.addWidget(self.line)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.dateLabel = QtWidgets.QLabel(self.centralwidget)
        self.dateLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.dateLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.dateLabel.setFont(font)
        self.dateLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.dateLabel.setObjectName("dateLabel")
        self.verticalLayout.addWidget(self.dateLabel)
        self.dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit.setDisplayFormat("yyyy-MM-dd")
        self.dateEdit.setMinimumSize(QtCore.QSize(300, 40))
        self.dateEdit.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.dateEdit.setFont(font)
        self.dateEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.dateEdit.setDate(QDate.currentDate())
        self.verticalLayout.addWidget(self.dateEdit)
        self.modeOfPaymentLabel = QtWidgets.QLabel(self.centralwidget)
        self.modeOfPaymentLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.modeOfPaymentLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.modeOfPaymentLabel.setFont(font)
        self.modeOfPaymentLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.modeOfPaymentLabel.setObjectName("modeOfPaymentLabel")
        self.verticalLayout.addWidget(self.modeOfPaymentLabel)
        self.modeOfPaymentComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.modeOfPaymentComboBox.setEnabled(True)
        self.modeOfPaymentComboBox.setMinimumSize(QtCore.QSize(300, 40))
        self.modeOfPaymentComboBox.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.modeOfPaymentComboBox.setFont(font)
        self.modeOfPaymentComboBox.setObjectName("modeOfPaymentComboBox")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.verticalLayout.addWidget(self.modeOfPaymentComboBox)
        self.remarkLabel = QtWidgets.QLabel(self.centralwidget)
        self.remarkLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.remarkLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.remarkLabel.setFont(font)
        self.remarkLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.remarkLabel.setObjectName("remarkLabel")
        self.verticalLayout.addWidget(self.remarkLabel)
        self.remarkInput = QtWidgets.QTextEdit(self.centralwidget)
        self.remarkInput.setMinimumSize(QtCore.QSize(300, 80))
        self.remarkInput.setMaximumSize(QtCore.QSize(300, 80))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.remarkInput.setFont(font)
        self.remarkInput.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.remarkInput.setObjectName("remarkInput")
        self.verticalLayout.addWidget(self.remarkInput)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem8)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setMinimumSize(QtCore.QSize(5, 0))
        self.line_2.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line_2.setStyleSheet("background-color: #32e0c4;")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_2.addWidget(self.line_2)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.previousTransLabel = QtWidgets.QLabel(self.centralwidget)
        self.previousTransLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.previousTransLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.previousTransLabel.setFont(font)
        self.previousTransLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.previousTransLabel.setObjectName("previousTransLabel")
        self.verticalLayout_3.addWidget(self.previousTransLabel)
        self.transactionsList = QtWidgets.QListWidget(self.centralwidget)
        self.transactionsList.setMinimumSize(QtCore.QSize(300, 300))
        self.transactionsList.setMaximumSize(QtCore.QSize(300, 300))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.transactionsList.setFont(font)
        self.transactionsList.setDragEnabled(True)
        self.transactionsList.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.transactionsList.setDefaultDropAction(QtCore.Qt.MoveAction)
        self.transactionsList.setObjectName("transactionsList")
        self.verticalLayout_3.addWidget(self.transactionsList)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.verticalLayout_4.addLayout(self.horizontalLayout_2)
        spacerItem11 = QtWidgets.QSpacerItem(20, 60, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem11)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem12)
        self.submitButton = QtWidgets.QPushButton(self.centralwidget)
        self.submitButton.setMinimumSize(QtCore.QSize(130, 50))
        self.submitButton.setMaximumSize(QtCore.QSize(130, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.submitButton.setFont(font)
        self.submitButton.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.submitButton.setObjectName("submitButton")
        self.horizontalLayout_3.addWidget(self.submitButton)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem13)
        self.cancelButton = QtWidgets.QPushButton(self.centralwidget)
        self.cancelButton.setMinimumSize(QtCore.QSize(130, 50))
        self.cancelButton.setMaximumSize(QtCore.QSize(130, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.cancelButton.setFont(font)
        self.cancelButton.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.cancelButton.setObjectName("cancelButton")
        self.horizontalLayout_3.addWidget(self.cancelButton)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem14)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.gridLayout.addLayout(self.verticalLayout_4, 1, 1, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.gridLayout.addItem(spacerItem15, 0, 1, 1, 1)
        TransactionWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(TransactionWindow)
        self.statusbar.setObjectName("statusbar")
        TransactionWindow.setStatusBar(self.statusbar)
        self.installment_id=None

        # Completer which will display the names of students who have payments issued
        cursor = mydb.cursor()
        sql_name_query = "SELECT DISTINCT s.first_name,s.middle_name,s.last_name FROM student_info_table s, payment_table p where s.student_id=p.student_id AND p.total_amt<>p.total_paid"
        cursor.execute(sql_name_query)
        lst = cursor.fetchall()
        if len(lst) != 0:
            lst = [' '.join(x) for x in lst]
        else:
            lst = []
        completer = QCompleter(lst, self.nameInput)
        completer.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        completer.setFilterMode(QtCore.Qt.MatchContains)
        self.nameInput.setCompleter(completer)
        self.final_name=None
        self.display_installment_values=None
        self.retranslateUi(TransactionWindow)
        #when a name is being entered
        self.nameInput.textChanged.connect(self.setValues)
        # submit button
        self.submitButton.clicked.connect(self.submitTransaction)

        QtCore.QMetaObject.connectSlotsByName(TransactionWindow)

    def setValues(self):
        #clearing the list before switching to other name
        self.transactionsList.clear()
        #taking name input
        self.stud_name = self.nameInput.text()
        cursor = mydb.cursor(buffered=True)
        name_val = tuple(self.stud_name.split(" "))
        #taking in inputs until the length of the tuple is 3 for fname,mname,lname
        if len(name_val)==3:
            self.final_name = self.stud_name
            if name_val[0]!="" and name_val[1]!="" and name_val[2]!="":
                sql_name = "SELECT student_id FROM student_info_table WHERE first_name =(%s) AND middle_name =(%s) AND last_name =(%s)"
                cursor.execute(sql_name, name_val)
                self.stud_id = cursor.fetchone()  # got student id for the selected VALID student name
                if not self.stud_id:
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Warning)
                    msg.setText("Student Does not have a installment Plan!")
                    msg.setWindowTitle("Warning")
                    msg.exec_()
                    return
                sql_payment = "SELECT payment_id FROM payment_table WHERE student_id=" + str(self.stud_id[0]) + " ORDER BY payment_id DESC"
                cursor.execute(sql_payment)
                self.pay_id = cursor.fetchone()  # got payment id of the selected VALID student name

                sql = "SELECT installment_no,installment_amt,installment_id FROM installments_table WHERE student_id=(%s) AND payment_id=(%s) AND status=(%s) ORDER BY payment_id DESC"
                install_val = (self.stud_id[0],self.pay_id[0],'Not Paid')
                cursor.execute(sql, install_val)
                # got installment id of the selected VALID student name

                temp =cursor.fetchone()
                if cursor.rowcount!=0:
                    self.display_installment_values = temp  # got installment_no and installment_amt
                    print(self.display_installment_values)
                    installment_no = temp[0]
                    installment_amt = temp[1]
                    self.installment_id=temp[2]
                    self.install_no = installment_no
                    #setting the real installment values in the non editable text section
                    #so that the user can see their on going installment no. and amt to be paid
                    self.installmentNoInput.setText(str(installment_no))
                    self.installmentAmtInput.setText(str(installment_amt))

                #Adding previous payment list in listview
                insert_prev_details_query = "SELECT installment_no,transaction_amt,transaction_date FROM transactions_table WHERE student_id=(%s) AND payment_id=(%s)  ORDER BY installment_id "
                insert_prev_details_val = (self.stud_id[0], self.pay_id[0])
                cursor.execute(insert_prev_details_query,insert_prev_details_val)
                lst_of_prev_details = cursor.fetchall()   #got previous list of paid transactions of the student
                if lst_of_prev_details:
                        title = "No. "+"  Amount"+"    Date"
                        self.transactionsList.addItem(title)
                        for x in lst_of_prev_details:
                                lst = str(x[0]) + ":     " + str(x[1]) + "            " + str(x[2])
                                self.transactionsList.addItem(lst)
                else:
                    #if this is the first installment being paid by the student then there's no previous data
                        self.transactionsList.addItem("  No Installment Paid yet ! ")
            else:
                    #if the input is not given in proper form of fname, mname and lname
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("We need full name of the student for making transaction.\n"
                                "Enter correct name or keywords of the name to choose from the drop down name-list.")
                msg.setWindowTitle("Warning")
                msg.exec_()
                self.nameInput.clear()
                return



    def submitTransaction(self):
        if not self.final_name:  #checking if name is entered
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Wrong entry in Name feild")
            msg.setWindowTitle("Abort")
            msg.exec_()
            return
        self.trans_amt = self.transactionAmtInput.text()
        self.trans_date = self.dateEdit.date().toPyDate()
        self.remark = self.remarkInput.toPlainText()
        self.mode_of_payment = self.modeOfPaymentComboBox.currentText()
        if self.trans_amt != "" and self.trans_date != "" and self.final_name!="" :  #the date and amt section should no be empty
            self.trans_amt = int(self.trans_amt) #converting str to int
        # comparing payments
            #if the amount entered is equal to the amount to be paid
            if self.trans_amt == self.display_installment_values[1]:
                cursor = mydb.cursor(buffered=True)
                print("valenter")
            # update installment table
                sql_submit_installments_table = "UPDATE installments_table SET installment_amt=(%s),status=(%s)" \
                                            "WHERE installment_id=(%s)"
                sql_submit_installments_val = (self.trans_amt, 'Paid', self.installment_id)
                cursor.execute(sql_submit_installments_table, sql_submit_installments_val)
                mydb.commit()
            # insert in transaction table
                sql_trans_table = "INSERT INTO transactions_table(student_id,payment_id,installment_id,installment_no," \
                                  "transaction_amt,transaction_date,mode_of_payment,remarks)VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                sql_trans_val = (self.stud_id[0], self.pay_id[0], self.installment_id, self.display_installment_values[0],
                                 self.trans_amt,self.trans_date,self.mode_of_payment, self.remark)
                cursor.execute(sql_trans_table, sql_trans_val)
                mydb.commit()
            #update total_paid in payment table
                amt =0
                #getting total_paid amt until now from payment_table
                sql = "SELECT total_paid FROM payment_table WHERE payment_id="+str(self.pay_id[0])
                cursor.execute(sql)
                tot_amt = cursor.fetchone()
                #adding the current paid amount to total_paid amt
                amt = self.trans_amt + tot_amt[0]
                #updating the total_paid amount
                sql_update = "UPDATE payment_table SET total_paid=" + str(amt)+" WHERE payment_id="+str(self.pay_id[0])
                cursor.execute(sql_update)
                mydb.commit()

                #message of payment done successfully
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setText("DataSubmitted")
                msg.setWindowTitle("Successful")
                msg.exec_()
                #clearing all the input feilds for new entry
                self.nameInput.clear()
                self.installmentNoInput.clear()
                self.installmentNoInput.setText("xx")
                self.installmentAmtInput.clear()
                self.installmentAmtInput.setText("xxxxx")
                self.transactionAmtInput.clear()
                self.transactionsList.clear()
                self.remarkInput.clear()
                self.modeOfPaymentComboBox.setCurrentIndex(0)
                self.dateEdit.setDate(QDate.currentDate())
                #print a bill
                self.bill()
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setText("Bill Printed for : \nName : " + self.final_name + "\nAmount : " + str(self.trans_amt) +
                        "\nInstallment No. : " + str(self.install_no) + "\nDate : " + str(
                            self.trans_date) + "\nMode : " + str(self.mode_of_payment))
                msg.setWindowTitle("Billing Data Preview")
                msg.exec_()

            #if the amount entered is greater than the amount to be paid
            elif self.trans_amt > self.display_installment_values[1]:
                cursor = mydb.cursor(buffered=True)
                print("more")
                sql = "SELECT installment_no FROM installments_table WHERE status=%s AND payment_id=%s"
                sql_val = ('Not Paid',self.pay_id[0])
                cursor.execute(sql,sql_val)
                count = cursor.fetchall() #no. of installments not-paid
            #if the installment lies in middle
                if len(count)>1:
                    sql_get = "SELECT installment_no,installment_amt FROM installments_table WHERE status=%s AND payment_id=%s LIMIT 2"
                    get_val = ('Not Paid',self.pay_id[0])
                    cursor.execute(sql_get,get_val)
                    install_no = cursor.fetchall()
                    print(install_no)
                    diff=0
                    extra = 0
                    sum = install_no[0][1] + install_no[1][1]
                    if self.trans_amt<= sum:
                        diff = self.trans_amt - install_no[0][1] #found the extra amt
                        extra = diff
                        diff = install_no[1][1]-diff  #minus the extra from nxt installment
                        print(diff)
                        if diff>0:
                        #updating the installment values and its payment status
                            sql1 = "UPDATE installments_table SET installment_amt=%s,status=%s WHERE installment_no=%s AND payment_id=%s"
                            val1 = (self.trans_amt,'Paid',install_no[0][0],self.pay_id[0])
                            print(val1)
                            cursor.execute(sql1,val1)
                            mydb.commit()
                            sql2 = "UPDATE installments_table SET installment_amt=%s WHERE installment_no=%s AND payment_id=%s"
                            val2 = (diff, install_no[1][0],self.pay_id[0])
                            cursor.execute(sql2, val2)
                            mydb.commit()
                        # insert in transaction table
                            sql_trans_table = "INSERT INTO transactions_table(student_id,payment_id,installment_id,installment_no," \
                                              "transaction_amt,transaction_date,mode_of_payment,remarks)VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                            sql_trans_val = (self.stud_id[0], self.pay_id[0], self.installment_id, self.display_installment_values[0],
                            self.trans_amt, self.trans_date, self.mode_of_payment, self.remark)
                            cursor.execute(sql_trans_table, sql_trans_val)
                            mydb.commit()
                        # update total_paid in payment table
                            amt = 0
                            sql = "SELECT total_paid FROM payment_table WHERE payment_id=" + str(self.pay_id[0])
                            cursor.execute(sql)
                            tot_amt = cursor.fetchone()
                            amt = self.trans_amt + tot_amt[0]
                            sql_update = "UPDATE payment_table SET total_paid=" + str(amt) + " WHERE payment_id=" + str(self.pay_id[0])
                            cursor.execute(sql_update)
                            mydb.commit()

                            msg = QtWidgets.QMessageBox()
                            msg.setIcon(QtWidgets.QMessageBox.Information)
                            msg.setText("Data Submitted Successfully and your extra payment of Rs."+str(extra)+" is deducted from your next "
                                        "Installment.")
                            msg.setWindowTitle("Successful")
                            msg.exec_()
                            self.nameInput.clear()
                            self.installmentNoInput.clear()
                            self.installmentNoInput.setText("xx")
                            self.installmentAmtInput.clear()
                            self.installmentAmtInput.setText("xxxxx")
                            self.transactionAmtInput.clear()
                            self.transactionsList.clear()
                            self.remarkInput.clear()
                            self.modeOfPaymentComboBox.setCurrentIndex(0)
                            self.dateEdit.setDate(QDate.currentDate())
                            #print bill
                            self.bill()
                            msg = QtWidgets.QMessageBox()
                            msg.setIcon(QtWidgets.QMessageBox.Information)
                            msg.setText(
                                "Bill Printed for : \nName : " + self.final_name + "\nAmount : " + str(self.trans_amt) +
                        "\nInstallment No. : " + str(self.install_no) + "\nDate : " + str(
                            self.trans_date) + "\nMode : " + str(self.mode_of_payment))
                            msg.setWindowTitle("Billing Data Preview")
                            msg.exec_()

                        elif diff<0:
                            msg = QtWidgets.QMessageBox()
                            msg.setIcon(QtWidgets.QMessageBox.Warning)
                            msg.setText("The amount you have entered is \nRs." + str(extra) + " extra."
                                         "\nPlease re-enter correct Installment amount.")
                            msg.setWindowTitle("Warning")
                            msg.exec_()


                        elif diff==0:

                            # updating the installment values and its payment status
                            sql1 = "UPDATE installments_table SET installment_amt=(%s),status=(%s) WHERE installment_no=(%s) AND payment_id=%s"
                            val1 = (self.trans_amt, 'Paid', install_no[0][0],self.pay_id[0])
                            cursor.execute(sql1, val1)
                            mydb.commit()

                            sql2 = "UPDATE installments_table SET installment_amt=%s,status=%s WHERE installment_no=%s AND payment_id=%s"
                            val2 = (0,'Paid', install_no[1][0], self.pay_id[0])
                            cursor.execute(sql2, val2)
                            mydb.commit()

                            sql_inst_id = "SELECT installment_id FROM installments_table WHERE installment_no="+str(install_no[1][0])
                            cursor.execute(sql_inst_id)
                            inst_id = cursor.fetchone()

                            # insert in transaction table
                            sql_trans_table = "INSERT INTO transactions_table(student_id,payment_id,installment_id,installment_no," \
                                              "transaction_amt,transaction_date,mode_of_payment,remarks)VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                            sql_trans_val = (
                            self.stud_id[0], self.pay_id[0], self.installment_id, self.display_installment_values[0],
                            self.trans_amt, self.trans_date, self.mode_of_payment, self.remark)
                            cursor.execute(sql_trans_table, sql_trans_val)
                            mydb.commit()
                            # update total_paid in payment table
                            amt = 0
                            sql = "SELECT total_paid FROM payment_table WHERE payment_id=" + str(self.pay_id[0])
                            cursor.execute(sql)
                            tot_amt = cursor.fetchone()
                            amt = self.trans_amt + tot_amt[0]
                            sql_update = "UPDATE payment_table SET no_of_installments="+str(install_no[0][0])+",total_paid=" + str(amt) + " WHERE payment_id=" + str(self.pay_id[0])
                            cursor.execute(sql_update)
                            mydb.commit()


                            msg = QtWidgets.QMessageBox()
                            msg.setIcon(QtWidgets.QMessageBox.Information)
                            msg.setText("Data Submitted Successfully.")
                            msg.setWindowTitle("Successful")
                            msg.exec_()
                            self.nameInput.clear()
                            self.installmentNoInput.clear()
                            self.installmentNoInput.setText("xx")
                            self.installmentAmtInput.clear()
                            self.installmentAmtInput.setText("xxxxx")
                            self.transactionAmtInput.clear()
                            self.transactionsList.clear()
                            self.remarkInput.clear()
                            self.modeOfPaymentComboBox.setCurrentIndex(0)
                            self.dateEdit.setDate(QDate.currentDate())
                            # print bill
                            self.bill()
                            msg = QtWidgets.QMessageBox()
                            msg.setIcon(QtWidgets.QMessageBox.Information)
                            msg.setText(
                                "Bill Printed for : \nName : " + self.final_name + "\nAmount : " + str(self.trans_amt) +
                        "\nInstallment No. : " + str(self.install_no) + "\nDate : " + str(
                            self.trans_date) + "\nMode : " + str(self.mode_of_payment))
                            msg.setWindowTitle("Billing Data Preview")
                            msg.exec_()

                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Warning)
                        msg.setText("You can enter amount up-to Rs."+str(sum)+" at a time."
                                     "\nPlease re-enter correct Installment amount.")
                        msg.setWindowTitle("Warning")
                        msg.exec_()
                elif len(count)==1:
                    sql_get = "SELECT installment_no,installment_amt FROM installments_table WHERE status=%s AND payment_id=%s "
                    get_val = ('Not Paid', self.pay_id[0])
                    cursor.execute(sql_get, get_val)
                    install_no = cursor.fetchone()
                    print(install_no)
                    diff = 0
                    extra = 0
                    diff = self.trans_amt - install_no[1]  # found the extra amt
                    extra = diff
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Warning)
                    msg.setText("You are on your last Installment and the amount you have entered is Rs." + str(extra) + " extra."
                                    "\nPlease re-enter correct Installment amount.")
                    msg.setWindowTitle("Warning")
                    msg.exec_()

            elif self.trans_amt < self.display_installment_values[1]:
                print("less")
                cursor = mydb.cursor(buffered=True)
                print("more")
                sql = "SELECT installment_no FROM installments_table WHERE status=%s AND payment_id=%s"
                sql_val = ('Not Paid', self.pay_id[0])
                cursor.execute(sql, sql_val)
                count = cursor.fetchall()
                # if the installment lies in middle
                if len(count) > 1:
                    sql_get = "SELECT installment_no,installment_amt FROM installments_table WHERE status=%s AND payment_id=%s LIMIT 2"
                    get_val = ('Not Paid', self.pay_id[0])
                    cursor.execute(sql_get, get_val)
                    install_no = cursor.fetchall()
                    print(install_no)
                    diff = 0
                    extra = 0
                    diff = install_no[0][1] - self.trans_amt  # found the extra amt
                    extra = diff
                    diff = install_no[1][1] + diff  # minus the extra from nxt installment
                    print(diff)

                    # updating the installment values and its payment status
                    sql1 = "UPDATE installments_table SET installment_amt=%s,status=%s WHERE installment_no=%s AND payment_id=%s"
                    val1 = (self.trans_amt, 'Paid', install_no[0][0], self.pay_id[0])
                    print(val1)
                    cursor.execute(sql1, val1)
                    mydb.commit()
                    sql2 = "UPDATE installments_table SET installment_amt=%s WHERE installment_no=%s AND payment_id=%s"
                    val2 = (diff, install_no[1][0], self.pay_id[0])
                    cursor.execute(sql2, val2)
                    mydb.commit()
                    # insert in transaction table
                    sql_trans_table = "INSERT INTO transactions_table(student_id,payment_id,installment_id,installment_no," \
                                      "transaction_amt,transaction_date,mode_of_payment,remarks)VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                    sql_trans_val = (
                    self.stud_id[0], self.pay_id[0], self.installment_id, self.display_installment_values[0],
                    self.trans_amt, self.trans_date, self.mode_of_payment, self.remark)
                    cursor.execute(sql_trans_table, sql_trans_val)
                    mydb.commit()
                    # update total_paid in payment table
                    amt = 0
                    sql = "SELECT total_paid FROM payment_table WHERE payment_id=" + str(self.pay_id[0])
                    cursor.execute(sql)
                    tot_amt = cursor.fetchone()
                    amt = self.trans_amt + tot_amt[0]
                    sql_update = "UPDATE payment_table SET total_paid=" + str(amt) + " WHERE payment_id=" + str(
                            self.pay_id[0])
                    cursor.execute(sql_update)
                    mydb.commit()

                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setText("Data Submitted Successfully and your pending payment of Rs." + str(
                            extra) + " is added to your next Installment.")
                    msg.setWindowTitle("Successful")
                    msg.exec_()
                    self.nameInput.clear()
                    self.installmentNoInput.clear()
                    self.installmentNoInput.setText("xx")
                    self.installmentAmtInput.clear()
                    self.installmentAmtInput.setText("xxxxx")
                    self.transactionAmtInput.clear()
                    self.transactionsList.clear()
                    self.remarkInput.clear()
                    self.modeOfPaymentComboBox.setCurrentIndex(0)
                    self.dateEdit.setDate(QDate.currentDate())
                    # print bill
                    self.bill()
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setText(
                        "Bill Printed for : \nName : " + self.final_name + "\nAmount : " + str(self.trans_amt) +
                        "\nInstallment No. : " + str(self.install_no) + "\nDate : " + str(
                            self.trans_date) + "\nMode : " + str(self.mode_of_payment))
                    msg.setWindowTitle("Billing Data Preview")
                    msg.exec_()



                elif len(count)==1:
                    sql_get = "SELECT installment_no,installment_amt FROM installments_table WHERE status=%s AND payment_id=%s "
                    get_val = ('Not Paid', self.pay_id[0])
                    cursor.execute(sql_get, get_val)
                    install_no = cursor.fetchall()
                    print(install_no)
                    diff = 0
                    extra = 0
                    diff = install_no[0][1] - self.trans_amt   # found the extra amt
                    #extra = diff
                    date = self.trans_date + timedelta(30)

                    sql1 = "UPDATE installments_table SET installment_amt=(%s),status=(%s) WHERE installment_no=(%s) AND payment_id=%s"
                    val1 = (self.trans_amt, 'Paid', install_no[0][0], self.pay_id[0])
                    cursor.execute(sql1, val1)
                    mydb.commit()

                    id = install_no[0][0] +1
                    sql2 = "INSERT INTO installments_table(student_id,payment_id,installment_no,status,installment_amt,installment_date) VALUES (%s,%s,%s,%s,%s,%s)"
                    val2 = (self.stud_id[0],self.pay_id[0],id, 'Not Paid', diff,date)
                    cursor.execute(sql2, val2)
                    mydb.commit()

                    sql_inst_id = "SELECT installment_id FROM installments_table WHERE installment_no=" + str(id)
                    cursor.execute(sql_inst_id)
                    inst_id = cursor.fetchone()

                    # insert in transaction table
                    sql_trans_table = "INSERT INTO transactions_table(student_id,payment_id,installment_id,installment_no," \
                                      "transaction_amt,transaction_date,mode_of_payment,remarks)VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                    sql_trans_val = (
                        self.stud_id[0], self.pay_id[0], self.installment_id, self.display_installment_values[0],
                        self.trans_amt, self.trans_date, self.mode_of_payment, self.remark)
                    cursor.execute(sql_trans_table, sql_trans_val)
                    mydb.commit()
                    # update total_paid in payment table
                    amt = 0
                    sql = "SELECT total_paid FROM payment_table WHERE payment_id=" + str(self.pay_id[0])
                    cursor.execute(sql)
                    tot_amt = cursor.fetchone()
                    amt = self.trans_amt + tot_amt[0]
                    sql_update = "UPDATE payment_table SET no_of_installments=" + str(id) + ",total_paid=" + str(amt) + " WHERE payment_id=" + str(self.pay_id[0])
                    cursor.execute(sql_update)
                    mydb.commit()


                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setText("Data Submitted Successfully.\nYour left amount of Rs."+str(diff)+" is added as next Installment to be paid on the Date: "+str(date))
                    msg.setWindowTitle("Successful")
                    msg.exec_()
                    self.nameInput.clear()
                    self.installmentNoInput.clear()
                    self.installmentNoInput.setText("xx")
                    self.installmentAmtInput.clear()
                    self.installmentAmtInput.setText("xxxxx")
                    self.transactionAmtInput.clear()
                    self.transactionsList.clear()
                    self.remarkInput.clear()
                    self.modeOfPaymentComboBox.setCurrentIndex(0)
                    self.dateEdit.setDate(QDate.currentDate())
                    # print bill
                    self.bill()
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setText(
                        "Bill Printed for : \nName : " + self.final_name + "\nAmount : " + str(self.trans_amt) +
                        "\nInstallment No. : " + str(self.install_no) + "\nDate : " + str(
                            self.trans_date) + "\nMode : " + str(self.mode_of_payment))
                    msg.setWindowTitle("Billing Data Preview")
                    msg.exec_()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Data field is empty")
            msg.setWindowTitle("Abort")
            msg.exec_()

        print("submit")




    def bill(self):
        #get phone number
        cursor = mydb.cursor(buffered=True)
        sql = "SELECT phone FROM student_info_table WHERE student_id = "+str(self.stud_id[0])
        cursor.execute(sql)
        self.phone = cursor.fetchone()

        SQL = "SELECT batch_id,course_id FROM student_course_batch WHERE student_id ="+str(self.stud_id[0])+" ORDER BY batch_id DESC LIMIT 1"
        cursor.execute(SQL)
        self.batch_course = cursor.fetchone()

        #get batch name
        sql1 = "SELECT batch_name FROM batches_table WHERE batch_id = "+str(self.batch_course[0])
        cursor.execute(sql1)
        self.batch_name = cursor.fetchone()

        #get course name
        sql2 = "SELECT course_name FROM courses_table WHERE course_id = "+str(self.batch_course[1])
        cursor.execute(sql2)
        self.course_name = cursor.fetchone()

        #get transaction id to calculate the pending and total paid
        sql3 = "SELECT transaction_id FROM transactions_table WHERE installment_no=%s AND installment_id=%s AND student_id=%s"
        val3 = (self.install_no,self.installment_id,self.stud_id[0])
        cursor.execute(sql3,val3)
        self.trans_id = cursor.fetchone()

        sql4 = "SELECT total_amt,total_paid FROM payment_table WHERE student_id=%s AND payment_id=%s"
        val4 = (self.stud_id[0],self.pay_id[0])
        cursor.execute(sql4,val4)
        paid = cursor.fetchone()
        self.total_amt = paid[0]
        self.total_paid= paid[1]
        self.total_pending = self.total_amt-self.total_paid

        #get next installment date
        sql5 = "SELECT installment_date FROM installments_table WHERE student_id=%s AND payment_id=%s AND status=%s"
        val5 = (self.stud_id[0],self.pay_id[0],'Not Paid')
        cursor.execute(sql5,val5)
        self.date = cursor.fetchone()
        f = '%Y-%m-%d'
        if self.date == "":  #if there is no next date
            self.date="-"
        else:
            date = str(self.date)
            print(date)
            y = date[15:19]
            m = date[20:22]
            d = date[23:26]
            self.final_date = d+"-"+m+"-"+y

        data = {'Name': str(self.final_name),  # self.final_name
                'Phone': str(self.phone),  # stud id ...phone no
                'Batch': str(self.batch_name),  # stud id ...batch id...batch name
                'Date': str(self.trans_date),  # trans_date
                'Tid': str(self.trans_id[0]),  # install id...stud id...trans_id
                'Iid': str(self.installment_id),  # self.installment_id
                'Ino': str(self.install_no),  # installment_no
                'Cname': str(self.course_name),  # stud id ...course id...course name
                'mode': str(self.mode_of_payment),  # self.mode_of_payment
                'amount_paid': str(self.trans_amt),  # self.trans_amt
                'total_pending': str(self.total_pending),  # total_amt - total_paid
                'total_paid': str(self.total_paid),  # total_paid
                'next_idate': str(self.final_date) }  # installment table...payment_id ...fetchone ..not paid ...install_date

        bill = BillGenerator()  # Creating a instance of BillGenerator
        bill.billGen(data)  # Passing the dictionary to billGen Function



    def retranslateUi(self, TransactionWindow):
        _translate = QtCore.QCoreApplication.translate
        TransactionWindow.setWindowTitle(_translate("TransactionWindow", "MainWindow"))
        self.transactionLabel.setText(_translate("TransactionWindow", "NEW TRANSACTION"))
        self.studentNameLabel.setText(_translate("TransactionWindow", "Student\'s Name"))
        self.installmentNoLabel.setText(_translate("TransactionWindow", "Installment Number: "))
        self.installmentNoInput.setText(_translate("TransactionWindow", "xx"))
        self.installmentAmtLabel.setText(_translate("TransactionWindow", "Actual Installment Amount"))
        self.installmentAmtInput.setText(_translate("TransactionWindow", "xxxxx"))
        self.transactionAmtLabel.setText(_translate("TransactionWindow", "Transaction Amount"))
        self.dateLabel.setText(_translate("TransactionWindow", "Select Date"))
        self.modeOfPaymentLabel.setText(_translate("TransactionWindow", "Mode of Payment"))
        self.modeOfPaymentComboBox.setItemText(0, _translate("TransactionWindow", "Cash"))
        self.modeOfPaymentComboBox.setItemText(1, _translate("TransactionWindow", "Cheque"))
        self.modeOfPaymentComboBox.setItemText(2, _translate("TransactionWindow", "Google Pay"))
        self.modeOfPaymentComboBox.setItemText(3, _translate("TransactionWindow", "PhonePe"))
        self.modeOfPaymentComboBox.setItemText(4, _translate("TransactionWindow", "Net Banking"))
        self.remarkLabel.setText(_translate("TransactionWindow", "Remark"))
        self.previousTransLabel.setText(_translate("TransactionWindow", "Previous Transactions"))
        self.submitButton.setText(_translate("TransactionWindow", "Submit"))
        self.cancelButton.setText(_translate("TransactionWindow", "Cancel"))

        # INPUT VALIDATOR
        # ----String----#
        self.myregex = QtCore.QRegExp("[A-Za-z]+")
        self.myregex3 = QtCore.QRegExp("[A-Za-z ]+")
        self.myregex2 = QtCore.QRegExp("[0-9A-Za-z, -]+")
        self.myregexph = QtCore.QRegExp("[0-9]+")

        # validate name
        self.nameInput.textChanged.connect(self.validate_name)
        # validate amount
        self.transactionAmtInput.textChanged.connect(self.validate_amt_2)

    def validate_name(self):
        my_validator = QtGui.QRegExpValidator(self.myregex3, self.nameInput)
        self.nameInput.setValidator(my_validator)

    def validate_amt_2(self):
        my_validator = QtGui.QRegExpValidator(self.myregexph, self.transactionAmtInput)
        self.transactionAmtInput.setValidator(my_validator)
